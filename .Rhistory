setwd("~/Documents/GitHub/2019_Acropora")
library(adespatial)
library(ade4)
library(spdep)
library(SoDA)
library(vegan)
#Load in the appropiate set of files
load(file="CLEANDATA/tenuis/acroten.genind.RData")
load(file="CLEANDATA/tenuis/locations.aten.RData")
aten=TRUE
data.xy<-as.data.frame(geoXY(locations$Lat, locations$Long, unit=1000))  #unit is KM
data.xy.c <- scale(data.xy, center=TRUE, scale=FALSE) #centered xy values
#convert to chi-square distances
acro.pop<-genind2genpop(acro.genind)
acro.chi<-decostand(acro.pop$tab, "chi.square") #Tranform to chi-square genetic distances
anova(rda(acro.chi, data.xy), step=1000)  # Result: significant trend, 5% and 10% variance constrained
response.matrix.det<- resid(lm(as.matrix(acro.chi) ~ ., data=data.xy))  #detrended data - use for MEMs but not AEM
#####Mantel corellogram###
response.matrix.D1 <- dist(response.matrix.det)
(data.correlog <- mantel.correlog(response.matrix.D1, XY=data.xy, nperm=999))  #distances under 220 km signif
plot(data.correlog)
?mantel.correlog
data.correlog$n.class # or: data.correlog[2]
data.correlog$break.pts # or: data.correlog[3]
(3.472983 + 149.353929)/2
load(file="CLEANDATA/millepora/acromill.genind.RData")
load(file="CLEANDATA/millepora/locations.mill.RData")
aten=FALSE
#PREPARE GEOGRAPHIC AND GENETIC DATA FILES
data.xy<-as.data.frame(geoXY(locations$Lat, locations$Long, unit=1000))  #unit is KM
data.xy.c <- scale(data.xy, center=TRUE, scale=FALSE) #centered xy values
#convert to chi-square distances
acro.pop<-genind2genpop(acro.genind)
acro.chi<-decostand(acro.pop$tab, "chi.square") #Tranform to chi-square genetic distances
anova(rda(acro.chi, data.xy), step=1000)  # Result: significant trend, 5% and 10% variance constrained
response.matrix.det<- resid(lm(as.matrix(acro.chi) ~ ., data=data.xy))  #detrended data - use for MEMs but not AEM
#####Mantel corellogram###
response.matrix.D1 <- dist(response.matrix.det)
data.correlog <- mantel.correlog(response.matrix.D1, XY=data.xy, nperm=999)
plot(data.correlog)
data.correlog$break.pts # Break points: AT signif pos under 149,
(data.correlog <- mantel.correlog(response.matrix.D1, XY=data.xy, nperm=999))
#Load in the appropiate set of files
load(file="CLEANDATA/tenuis/acroten.genind.RData")
load(file="CLEANDATA/tenuis/locations.aten.RData")
aten=TRUE
data.xy<-as.data.frame(geoXY(locations$Lat, locations$Long, unit=1000))  #unit is KM
data.xy.c <- scale(data.xy, center=TRUE, scale=FALSE) #centered xy values
#convert to chi-square distances
acro.pop<-genind2genpop(acro.genind)
acro.chi<-decostand(acro.pop$tab, "chi.square") #Tranform to chi-square genetic distances
anova(rda(acro.chi, data.xy), step=1000)  # Result: significant trend, 5% and 10% variance constrained
response.matrix.det<- resid(lm(as.matrix(acro.chi) ~ ., data=data.xy))  #detrended data - use for MEMs but not AEM
data.del <- tri2nb(data.xy)   #make connections between nearest neighbors, nb object
#plot(data.del, data.xy, col="red", pch=20, cex=1)
dist.del<-nb2listw(data.del, style="B") #creates weights based on neighboring links
scores.del <- scores.listw(dist.del)  #computes MEMs from spatial weighting matrix
del.del.res <- test.W(response.matrix.det, data.del)
del.del.res
scores.del
load(file="CLEANDATA/tenuis/acroten.genind.RData")
load(file="CLEANDATA/tenuis/acroten.genind.RData")
acro.genind
acro.genind@pop
table(acro.genind@pop)
load(file="CLEANDATA/tenuis/locations.aten.RData")
View(locations)
as.vector(table(acro.genind@pop))
locations<-cbind(locations, as.vector(table(acro.genind@pop)))
View(locations)
write.csv(locations,"mergedlocations.csv")
acro.genind@tab
pop.list<-seppop(acro.genind)
pop.list[24]
pop.list[23]
pop.list[24]@tab
pop.list$24@tab
pop.list$`23`$tab
pop.list[24]
pop.list[25]
length(pop.list)
acro.data<-read.table("ORIGDATA/Atenuis_genind_1939_Inds_with_ReefID.txt", header =TRUE)
acro.genind<-df2genind(acro.data[,6:ncol(acro.data)], sep=":", ind = acro.data[,1], pop= acro.data[,3] , type="codom")
pop.list<-seppop(acro.genind)
length(pop.list)
acro.data<-read.table("ORIGDATA/Atenuis_genind_1939_Inds_with_ReefID2.txt", header =TRUE)
locations<-read.csv("ORIGDATA/ReefID_centroids_tenuis.csv", header =TRUE)  #these are lat and long for centers of each reef location
acro.genind<-df2genind(acro.data[,6:ncol(acro.data)], sep=":", ind = acro.data[,1], pop= acro.data[,3] , type="codom")
for (r in 1:nrow(acro.data))
{
acro.data[r,"centLat"]<-locations[acro.data[r,"ReefID"],"Lat"]
acro.data[r,"centLong"]<-locations[acro.data[r,"ReefID"],"Long"]
}
acro.genind$other$latlong <- acro.data[,c("centLat", "centLong")]   #adds lat and long genind object
pop.list<-seppop(acro.genind)
acro.genind
acro.genind@pop
as.vector(table(acro.genind@pop))
NA_num <- function(v) {sum(is.na(v))}    #counts the number of NA values
#READ IN FILES FOR ADEGENET
#tenuis
acro.data<-read.table("ORIGDATA/Atenuis_genind_1939_Inds_with_ReefID.txt", header =TRUE)
locations<-read.csv("ORIGDATA/ReefID_centroids_tenuis.csv", header =TRUE)  #these are lat and long for centers of each reef location
#millepora
#acro.data<-read.table("ORIGDATA/Amille_genind_918_Inds_with_ReefID.txt", header =TRUE)
#locations<-read.csv("ORIGDATA/ReefID_centroids_millepora.csv", header =TRUE)  #these are lat and long for centers of each reef location
#read in tables, convert to genind objects, and replace lat and long with values for reef centroids
acro.genind<-df2genind(acro.data[,6:ncol(acro.data)], sep=":", ind = acro.data[,1], pop= acro.data[,3] , type="codom")
for (r in 1:nrow(acro.data))
{
acro.data[r,"centLat"]<-locations[acro.data[r,"ReefID"],"Lat"]
acro.data[r,"centLong"]<-locations[acro.data[r,"ReefID"],"Long"]
}
acro.genind$other$latlong <- acro.data[,c("centLat", "centLong")]   #adds lat and long genind object
#HOW MUCH MISSING DATA BY LOCUS AND BY INDIVIDUAL?
acro.df<-genind2df(acro.genind, usepop = FALSE)
rownames(acro.df)<-indNames(acro.genind)
missingdata<-apply(acro.df, 1, NA_num)  #ID individuals with lots of missing data
hist(missingdata, main ="Missing data by individuals", xlab="Amount of data missing")
# tenuis: one individual with 4 loci missing; 10 with 3; 68 with 2; 220 with 1
# mille: 40 individuals with 1 missing locus: ignore
ind_cutoff<-2   #remove individuals with more than two loci missing
length(missingdata[missingdata>ind_cutoff])
highNAs<-indNames(acro.genind[missingdata>ind_cutoff])
acro.genind<-acro.genind[!indNames(acro.genind) %in% highNAs]  #AT: 1928 individuals; AM: 918 individuals
#look for low polymorphism loci (singletons, doubletons)
lowPM.loci<-which(!isPoly(acro.genind,by="allele", thres=20/(2*length(indNames(acro.genind)))))  #present in three copies or fewer
#both species: zero low PM loci
#SAVE and TIDY
save(acro.genind, file="CLEANDATA/tenuis/acroten.genind.RData")
acro.genind
acro.genind.new<-acro.genind
load(file="CLEANDATA/tenuis/acroten.genind_old.RData")
acro.genind
acro.genind.new
table(acro.genind$pop)
table(acro.genind_old$pop)
table(acro.genind.new$pop)
View(locations)
acro.data<-read.table("ORIGDATA/Amille_genind_918_Inds_with_ReefID.txt", header =TRUE)
locations<-read.csv("ORIGDATA/ReefID_centroids_millepora.csv", header =TRUE)  #these are lat and long for centers of each reef location
#read in tables, convert to genind objects, and replace lat and long with values for reef centroids
acro.genind<-df2genind(acro.data[,6:ncol(acro.data)], sep=":", ind = acro.data[,1], pop= acro.data[,3] , type="codom")
for (r in 1:nrow(acro.data))
{
acro.data[r,"centLat"]<-locations[acro.data[r,"ReefID"],"Lat"]
acro.data[r,"centLong"]<-locations[acro.data[r,"ReefID"],"Long"]
}
acro.genind$other$latlong <- acro.data[,c("centLat", "centLong")]   #adds lat and long genind object
table(acro.genind$pop)
View(locations)
locations<-cbind(locations, as.vector(table(acro.genind$pop)))
write.csv(locations, "millmerg.csv")
load(file="CLEANDATA/millepora/locations.mill.RData")
locations<-cbind(locations, as.vector(table(acro.genind$pop)))
View(locations)
acro.genind
acro.genind@pop[1]
View(acro.data)
unique(acro.data$OrigPop)
locations<-cbind(locations, unique(acro.data$OrigPop))
